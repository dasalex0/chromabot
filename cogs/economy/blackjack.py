from utils import *


class Blackjack(commands.Cog):
	def __init__(self, bot:commands.Bot):
		self.bot = bot
		self.blackjack_cooldown = {}
		self.blackjack_sessions = {}


	def check_bj(self, member:disnake.Member):
		cd = BJ_COOLDOWN
		if str(member.id) not in self.blackjack_cooldown:
			self.blackjack_cooldown[str(member.id)] = {'win': 0, 'lastwin': 0}
		if self.blackjack_cooldown[str(member.id)]['win'] >= BJ_MAX and self.blackjack_cooldown[str(member.id)]['lastwin']+cd > curTime():
			self.blackjack_cooldown[str(member.id)] = {'win': 0, 'lastwin': 0}
			set_cooldown(member, 'blackjack', cd)

	def acard(self, points):
		if points+11 > 21: return 1
		return 11

	@commands.Cog.listener("on_button_click")
	async def blackjack_button(self, inter: disnake.MessageInteraction):
		if inter.component.custom_id.startswith(("bj_hit:", "bj_skip:")):
			custom_id = inter.component.custom_id.split(":")
			session = custom_id[1]
			if session not in self.blackjack_sessions: return
			db = self.blackjack_sessions[session]
			#–ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
			if inter.author.id not in [db["member"]["id"], db["dealer"]["id"]]:
				return await error(inter, "<:cross:1127281507430576219> **–í–∏ –Ω–µ –ø—Ä–∏–π–º–∞—î—Ç–µ —É—á–∞—Å—Ç—å –≤ —Ü—ñ–π –≥—Ä—ñ!**")
			if inter.author.id == db["member"]["id"] and not db["member"]["hit"]:
				return await error(inter, "<:cross:1127281507430576219> **–ó–∞—Ä–∞–∑ –Ω–µ –≤–∞—à —Ö—ñ–¥!**")
			if inter.author.id == db["dealer"]["id"] and not db["dealer"]["hit"]:
				return await error(inter, "<:cross:1127281507430576219> **–ó–∞—Ä–∞–∑ –Ω–µ –≤–∞—à —Ö—ñ–¥!**")
			#–î—ñ—è
			if inter.component.custom_id.startswith("bj_hit:"):
				await self.hit(inter, session)
			elif inter.component.custom_id.startswith("bj_skip:"):
				await self.skip(inter, session)

		elif inter.component.custom_id == "bj_help":
			emb = disnake.Embed(description=(
				"### –¶—ñ–ª—å\n"
				"–°—É–º–∞ –≤—Å—ñ—Ö –≤–∞—à–∏—Ö –∫–∞—Ä—Ç –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é, –Ω—ñ–∂ —É –≤–∞—à–æ–≥–æ —Å—É–ø–µ—Ä–Ω–∏–∫–∞, –∞–ª–µ –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 21.\n"
				"–í–∞–ª–µ—Ç–∏ (J), –¥–∞–º–∏ (Q) —Ç–∞ –∫–æ—Ä–æ–ª—ñ (K) - –≤–∞—Ä—Ç—É—é—Ç—å 10 –æ—á–æ–∫. –¢—É–∑–∏ (A) –º–æ–∂—É—Ç—å –≤–∞—Ä—Ç—É–≤–∞—Ç–∏ 1 –∞–±–æ 11 –æ—á–æ–∫.\n"
				"### –Ü–≥—Ä–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å\n"
				"–ù–∞ –ø–æ—á–∞—Ç–∫—É –≤–∏ —Ç–∞ –¥—Ä—É–≥–∏–π –≥—Ä–∞–≤–µ—Ü—å –æ—Ç—Ä–∏–º—É—î—Ç–µ –ø–æ –æ–¥–Ω—ñ–π –∫–∞—Ä—Ç—ñ. –í–∞–º –Ω–∞–¥–∞—î—Ç—å—Å—è –ø–∞—Ä—É –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —Ç–æ–≥–æ, —â–æ —Ä–æ–±–∏—Ç–∏ –∑ —Ü–∏–º–∏ –∫–∞—Ä—Ç–∫–∞–º–∏:\n"
				"> `–í–∑—è—Ç–∏ –∫–∞—Ä—Ç–∫—É`: –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ —â–µ –æ–¥–Ω—É –∫–∞—Ä—Ç—É, —ñ —Ö—ñ–¥ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —Å—É–ø–µ—Ä–Ω–∏–∫—É, —è–∫—â–æ –≤–∏ –Ω–µ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ 21.\n"
				"> `–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ö—ñ–¥`: –í–∏ –ø—Ä–æ–ø—É—Å–∫–∞—î—Ç–µ —Å–≤—ñ–π —Ö—ñ–¥, —ñ –≤—ñ–Ω –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —Å—É–ø–µ—Ä–Ω–∏–∫—É.\n"
				"### –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫–∞—Ä—Ç | –§—ñ–Ω–∞–ª\n"
				"–Ø–∫—â–æ –≥—Ä–∞ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ \"–≥–ª—É—Ö–∏–π –∫—É—Ç\", —Ç–æ–±—Ç–æ –∫–æ–ª–∏ –æ–±–∏–¥–≤–∞ –≥—Ä–∞–≤—Ü—ñ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—å —Å–≤–æ—ó —Ö–æ–¥–∏, —Ç–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞—Ä—Ç. –í–∏–≥—Ä–∞—î –≥—Ä–∞–≤–µ—Ü—å –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –æ—á–æ–∫.\n"
				"–ü—Ä–æ—Ç–µ, –≥—Ä–∞ –º–æ–∂–µ –∑–∞–∫—ñ–Ω—á–∏—Ç–∏—Å—è —ñ —Ä–∞–Ω—ñ—à–µ: –Ø–∫—â–æ –±—É–¥—å-—è–∫–∏–π –≥—Ä–∞–≤–µ—Ü—å –Ω–∞–±–µ—Ä–µ –±—ñ–ª—å—à–µ 21 –æ—á–æ–∫, –≤—ñ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–æ–≥—Ä–∞—î, –∞–±–æ –≤–∏–≥—Ä–∞—î, —è–∫—â–æ –Ω–∞–±–µ—Ä–µ —Ä—ñ–≤–Ω–æ 21 –æ—á–∫–æ."
			), color=EMBEDCOLOR)
			await inter.send(embed=emb, ephemeral=True)

		elif inter.component.custom_id.startswith("bj_accept:"):
			custom_id = inter.component.custom_id.split(":")
			member_id = int(custom_id[1])
			author_id = int(custom_id[2])
			bet = custom_id[3]
			if inter.author.id != member_id:
				return await error(inter, "<:cross:1127281507430576219> **–¶–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º!**")
			member1 = inter.guild.get_member(author_id)
			if not member1: return
			member2 = inter.guild.get_member(member_id)
			if not member2: return
			await self.start_blackjack(inter, member1, member2, int(bet))

		elif inter.component.custom_id.startswith("bj_deny:"):
			custom_id = inter.component.custom_id.split(":")
			member_id = int(custom_id[1])
			if inter.author.id != member_id:
				return await error(inter, "<:cross:1127281507430576219> **–¶–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º!**")
			emb = disnake.Embed(title="üÉè –ë–ª–µ–∫–¥–∂–µ–∫", description=f"**{inter.author.id} –≤—ñ–¥—Ö–∏–ª–∏–≤ –≥—Ä—É –≤ –±–ª–µ–∫–¥–∂–µ–∫!**", color=RED, timestamp=inter.created_at)
			emb.set_thumbnail(url=inter.author.display_avatar)
			try: await inter.response.edit_message(content="", embed=emb, components=[])
			except: pass


	async def hit(self, inter:disnake.MessageInteraction, session:str):
		#–ó–∞–≥–∞–ª—å–Ω–µ
		if session not in self.blackjack_sessions: return
		db = self.blackjack_sessions[session]
		if inter.author.id == db["member"]["id"]:
			you = "member"
		if inter.author.id == db["dealer"]["id"]:
			you = "dealer"

		#–ó–∞—Ç—Ä–∏–º–∫–∞
		self.check_bj(inter.author)
		check = await checkcooldown(inter.author, "blackjack")
		if check: return await cooldown_notice(inter, check)

		#–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫
		BJ_TABLE_NEW = BJ_TABLE()
		for card in db[you]["cards"]:
			BJ_TABLE_NEW.pop(card)
		
		#–ü–æ—ñ–Ω—Ç–∏
		points = 0
		for card in db[you]["cards"]:
			value = BJ_TABLE()[card]
			if value == "rnd": value = self.acard(points)
			points += value

		#–î—ñ—Å—Ç–∞–≤–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –∫–∞—Ä—Ç–∫–∏
		card = random.choice(list(BJ_TABLE_NEW))
		value = BJ_TABLE_NEW[card]
		if value == "rnd": value = self.acard(points)
		BJ_TABLE_NEW.pop(card)
		points += value
		db[you]["cards"].append(card)
		self.blackjack_sessions[session] = db

		#–ó—Ä–∞–¥–∞ —á–∏ –ø–µ—Ä–µ–º–æ–≥–∞
		if points > 21:
			if you == "member":
				return await self.end_game(inter, session, 1)
			elif you == "dealer":
				return await self.end_game(inter, session, 2)
		elif points == 21:
			self.blackjack_cooldown[str(inter.author.id)]['win'] += db["bet"]
			self.blackjack_cooldown[str(inter.author.id)]['lastwin'] = curTime()
			if you == "member":
				return await self.end_game(inter, session, 2)
			elif you == "dealer":
				return await self.end_game(inter, session, 1)

		await self.skip(inter, session, by_button=False)


	async def dealer_hit(self, inter:disnake.MessageInteraction, session:str):
		#–ó–∞–≥–∞–ª—å–Ω–µ
		if session not in self.blackjack_sessions: return
		db = self.blackjack_sessions[session]

		#–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫
		BJ_TABLE_NEW = BJ_TABLE()
		for card in db["dealer"]["cards"]:
			BJ_TABLE_NEW.pop(card)
		
		#–ü–æ—ñ–Ω—Ç–∏ –≥—Ä–∞–≤—Ü—è
		points1 = 0
		for card in db["member"]["cards"]:
			value = BJ_TABLE()[card]
			if value == "rnd": value = self.acard(points1)
			points1 += value
		
		#–ü–æ—ñ–Ω—Ç–∏ –¥—ñ–ª–µ—Ä–∞
		points2 = 0
		for card in db["dealer"]["cards"]:
			value = BJ_TABLE()[card]
			if value == "rnd": value = self.acard(points2)
			points2 += value

		#–•—ñ–¥
		if (points2 < 17) or (points2 >= 17 and points2 != 20 and points2 < points1 and random.randint(1,2) == 2):
			#–î—ñ—Å—Ç–∞–≤–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –∫–∞—Ä—Ç–∫–∏
			card = random.choice(list(BJ_TABLE_NEW))
			value = BJ_TABLE_NEW[card]
			if value == "rnd": value = self.acard(points2)
			BJ_TABLE_NEW.pop(card)
			points2 += value
			db["dealer"]["cards"].append(card)
		#–°–∫—ñ–ø
		else:
			db["skips"] += 1

		#–ó–º—ñ–Ω–∞ —Ö–æ–¥—É
		db["dealer"]["hit"] = False
		db["member"]["hit"] = True

		#–ó—Ä–∞–¥–∞ —á–∏ –ø–µ—Ä–µ–º–æ–≥–∞
		if points2 > 21:
			self.blackjack_cooldown[str(inter.author.id)]['win'] += db["bet"]
			self.blackjack_cooldown[str(inter.author.id)]['lastwin'] = curTime()
			return await self.end_game(inter, session, 2)
		elif points2 == 21:
			if db["dealer"]["id"] != "bot":
				self.blackjack_cooldown[str(db["dealer"]["id"])]['win'] += db["bet"]
				self.blackjack_cooldown[str(db["dealer"]["id"])]['lastwin'] = curTime()
			return await self.end_game(inter, session, 1)
		self.blackjack_sessions[session] = db

		#Embed
		emb = self.blackjack_embed(session)
		components = [
			disnake.ui.Button(label="–í–∑—è—Ç–∏ –∫–∞—Ä—Ç–∫—É", style=disnake.ButtonStyle.blurple, custom_id=f"bj_hit:{session}"),
			disnake.ui.Button(label="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ö—ñ–¥", style=disnake.ButtonStyle.green, custom_id=f"bj_skip:{session}"),
			disnake.ui.Button(label="–Ø–∫ –≥—Ä–∞—Ç–∏?", emoji="‚ùî", custom_id="bj_help")
		]
		if db["dealer"]["hit"]:
			await inter.edit_original_response(embed=emb, components=components)
		else:
			await inter.edit_original_response(embed=emb, components=components)


	async def skip(self, inter:disnake.MessageInteraction, session:str, by_button:bool=True):
		#–ó–∞–≥–∞–ª—å–Ω–µ
		if session not in self.blackjack_sessions: return
		db = self.blackjack_sessions[session]
		if inter.author.id == db["member"]["id"]:
			you = "member"
		if inter.author.id == db["dealer"]["id"]:
			you = "dealer"

		#–ó–∞—Ç—Ä–∏–º–∫–∞
		self.check_bj(inter.author)
		check = await checkcooldown(inter.author, "blackjack")
		if check: return await cooldown_notice(inter, check)

		#–ó–º—ñ–Ω–∞ —Ö–æ–¥—É
		if by_button:
			db["skips"] += 1
		db[you]["hit"] = False
		if you == "member":
			db["dealer"]["hit"] = True
		else:
			db["member"]["hit"] = True

		self.blackjack_sessions[session] = db
		
		#–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
		if db["skips"] > BJ_MAX_SKIPS:
			points = 0
			for card in db["member"]["cards"]:
				value = BJ_TABLE()[card]
				if value == "rnd": value = self.acard(points)
				points += value
			points2 = 0
			for card in db["dealer"]["cards"]:
				value = BJ_TABLE()[card]
				if value == "rnd": value = self.acard(points2)
				points2 += value
			if points > 21:
				if db["dealer"]["id"] != "bot":
					self.blackjack_cooldown[str(db["dealer"]["id"])]['win'] += db["bet"]
					self.blackjack_cooldown[str(db["dealer"]["id"])]['lastwin'] = curTime()
				return await self.end_game(inter, session, 1)
			if points2 > 21:
				self.blackjack_cooldown[str(inter.author.id)]['win'] += db["bet"]
				self.blackjack_cooldown[str(inter.author.id)]['lastwin'] = curTime()
				return await self.end_game(inter, session, 2)
			if points > points2:
				self.blackjack_cooldown[str(inter.author.id)]['win'] += db["bet"]
				self.blackjack_cooldown[str(inter.author.id)]['lastwin'] = curTime()
				return await self.end_game(inter, session, 2)
			if points < points2:
				if db["dealer"]["id"] != "bot":
					self.blackjack_cooldown[str(db["dealer"]["id"])]['win'] += db["bet"]
					self.blackjack_cooldown[str(db["dealer"]["id"])]['lastwin'] = curTime()
				return await self.end_game(inter, session, 1)
			if points == points2:
				return await self.end_game(inter, session, 3)

		#–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		emb = self.blackjack_embed(session)
		if db["dealer"]["id"] == "bot":
			loadbtn = disnake.ui.Button(emoji="<a:typing:1231169977315495957>", disabled=True)
			if db["dealer"]["hit"]:
				await inter.response.edit_message(embed=emb, components=[loadbtn])
			else:
				await inter.response.edit_message(embed=emb, components=[loadbtn])
			await asyncio.sleep(random.uniform(0.8, 1.9))
			await self.dealer_hit(inter, session)
		else:
			await inter.response.edit_message(embed=emb)


	async def end_game(self, inter:disnake.MessageInteraction, session:str, result:int):
		if session not in self.blackjack_sessions: return
		db = self.blackjack_sessions[session]
		money = eco_db.find(f"{db['member']['id']}.money")
		member = inter.guild.get_member(db['member']['id'])
		if db['dealer']['id'] != "bot":
			member2 = inter.guild.get_member(db['dealer']['id'])
			money2 = eco_db.find(f"{db['dealer']['id']}.money")
		#–ü—Ä–æ–≥—Ä–∞—à (–¥–ª—è 1 –≥—Ä–∞–≤—Ü—è)
		if result == 1:
			db['dealer']['hit'] = True
			db['member']['hit'] = False
			if db['dealer']['id'] == "bot":
				color = RED
				message = "**–î–∏–ª–µ—Ä** –ø–µ—Ä–µ–º—ñ–≥ –≥—Ä–∞–≤—Ü—è!\n**–í–∏ –≤—Ç—Ä–∞—Ç–∏–ª–∏:** {amount}"
			else:
				color = GREEN
				eco_db.update(f"{db['dealer']['id']}.money", money2+db['bet']*2)
				message = f"{member2.mention} –ø–µ—Ä–µ–º—ñ–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {member.mention}!"
		#–ü–µ—Ä–µ–º–æ–≥–∞ (–¥–ª—è 1 –≥—Ä–∞–≤—Ü—è)
		elif result == 2:
			eco_db.update(f"{db['member']['id']}.money", money+db['bet']*2)
			db['member']['hit'] = True
			db['dealer']['hit'] = False
			if db['dealer']['id'] == "bot":
				message = f"{member.mention} –ø–µ—Ä–µ–º—ñ–≥ –¥–∏–ª–µ—Ä–∞!"+"\n**–í–∏ –≤–∏–≥—Ä–∞–ª–∏:** {amount}"
			else:
				message = f"{member.mention} –ø–µ—Ä–µ–º—ñ–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {member2.mention}!"
			color = GREEN
		#–ù—ñ—á–∏—è
		elif result == 3:
			db['dealer']['hit'] = False
			db['member']['hit'] = False
			eco_db.update(f"{db['member']['id']}.money", money+db['bet'])
			if db['dealer']['id'] != "bot":
				eco_db.update(f"{db['dealer']['id']}.money", money2+db['bet'])
			message = "**–ù—ñ—á–∏—è!**"
			color = disnake.Colour.orange()

		#Embed
		emb = self.blackjack_embed(session, message, color)
		components = [
			disnake.ui.Button(label="–í–∑—è—Ç–∏ –∫–∞—Ä—Ç–∫—É", style=disnake.ButtonStyle.blurple, disabled=True),
			disnake.ui.Button(label="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ö—ñ–¥", style=disnake.ButtonStyle.green, disabled=True),
			disnake.ui.Button(label="–Ø–∫ –≥—Ä–∞—Ç–∏?", emoji="‚ùî", custom_id="bj_help")
		]
		if not inter.response.is_done():
			await inter.response.defer()
		await inter.edit_original_response(embed=emb, components=components)
		self.blackjack_sessions.pop(session)


	def blackjack_embed(self, session:str, message:str=None, color:int=INVISIBLE):
		db = self.blackjack_sessions[session]
		#–ì—Ä–∞–≤–µ—Ü—å
		member = self.bot.get_guild(GUILD_ID).get_member(db["member"]["id"])
		member_cards = db["member"]["cards"]
		member_cards_str = " ".join(member_cards)
		member_points = 0
		for card in member_cards:
			value = BJ_TABLE()[card]
			if value == "rnd": value = self.acard(member_points)
			member_points += value
		if db["member"]["hit"] and not message:
			if db["dealer"]["id"] == "bot":
				message = f"{member.mention}, –≤–∞—à —Ö—ñ–¥!"
			else:
				message = f"–•—ñ–¥ {member.mention}!"

		#–î–∏–ª–µ—Ä
		dealer = self.bot.get_guild(GUILD_ID).get_member(db["dealer"]["id"])
		dealer_cards = db["dealer"]["cards"]
		dealer_cards_str = " ".join(dealer_cards)
		dealer_points = 0
		for card in dealer_cards:
			value = BJ_TABLE()[card]
			if value == "rnd": value = self.acard(dealer_points)
			dealer_points += value
		if db["dealer"]["hit"] and not message:
			if db["dealer"]["id"] == "bot":
				message = f"–•—ñ–¥ **–¥–∏–ª–µ—Ä–∞**!"
			else:
				message = f"–•—ñ–¥ {dealer.mention}!"

		#Embed
		if member_points == 21: member_points = "BJ"
		if dealer_points == 21: dealer_points = "BJ"
		emb = disnake.Embed(description=message.replace("{amount}", f"{hf(db['bet'])}{CURRENCY}"), color=color)
		emb.title = "üÉè –ë–ª–µ–∫–¥–∂–µ–∫"
		if db["member"]["hit"]:
			emb.set_thumbnail(member.display_avatar)
		elif db["dealer"]["hit"] and db["dealer"]["id"] != "bot":
			emb.set_thumbnail(dealer.display_avatar)
		else:
			emb.set_thumbnail(member.display_avatar)
		if db["dealer"]["id"] == "bot":
			emb.add_field(name=f"–ö–∞—Ä—Ç–∫–∏ –≥—Ä–∞–≤—Ü—è ({member_points})", value=member_cards_str)
			emb.add_field(name=f"–ö–∞—Ä—Ç–∫–∏ –¥–∏–ª–µ—Ä–∞ ({dealer_points})", value=dealer_cards_str)
		else:
			emb.add_field(name=f"{member.display_name} ({member_points})", value=member_cards_str)
			emb.add_field(name=f"{dealer.display_name} ({dealer_points})", value=dealer_cards_str)
		emb.set_footer(text=f"–°—Ç–∞–≤–∫–∞: {hf(db['bet'])}‚Ç¥")
		return emb


	async def start_blackjack(self, inter:disnake.MessageInteraction, member1:disnake.Member, member2:disnake.Member, bet:int):
		money = eco_db.find(f"{member1.id}.money")
		if member2:
			money2 = eco_db.find(f"{member2.id}.money")

		#–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É —Å–µ—Å—ñ—é
		for game in self.blackjack_sessions:
			if self.blackjack_sessions[game]["member"]["id"] == member1.id or self.blackjack_sessions[game]["dealer"]["id"] == member1.id:
				return await error(inter, f"<:cross:1127281507430576219> **{member1.mention} –≤–∂–µ –ø—Ä–∏–π–º–∞—î —É—á–∞—Å—Ç—å –≤ —ñ–Ω—à—ñ–π –≥—Ä—ñ!**", ephemeral=False)
			if self.blackjack_sessions[game]["member"]["id"] == member2.id or self.blackjack_sessions[game]["dealer"]["id"] == member2.id:
				return await error(inter, f"<:cross:1127281507430576219> **{member2.mention} –≤–∂–µ –ø—Ä–∏–π–º–∞—î —É—á–∞—Å—Ç—å –≤ —ñ–Ω—à—ñ–π –≥—Ä—ñ!**", ephemeral=False)

		#–ó–Ω—ñ–º–∞–Ω–Ω—è –≥—Ä–æ—à–µ–π
		money -= bet
		eco_db.update(f"{member1.id}.money", money)
		if member2:
			money2 -= bet
			eco_db.update(f"{member2.id}.money", money2)

		#–ö–∞—Ä—Ç–∏
		BJ_TABLE_NEW = BJ_TABLE()
		card = random.choice(list(BJ_TABLE_NEW))
		value = BJ_TABLE()[card]
		BJ_TABLE_NEW.pop(card)
		card2 = random.choice(list(BJ_TABLE_NEW))

		#–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
		session = str(random.randint(1000,9999))
		while session in self.blackjack_sessions:
			session = str(random.randint(1000,9999))
		self.blackjack_sessions[session] = {}
		self.blackjack_sessions[session]["member"] = {"id": member1.id, "cards": [card], "hit": True}
		if member2:
			self.blackjack_sessions[session]["dealer"] = {"id": member2.id, "cards": [card2], "hit": False}
		else:
			self.blackjack_sessions[session]["dealer"] = {"id": "bot", "cards": [card2], "hit": False}
		self.blackjack_sessions[session]["bet"] = bet
		self.blackjack_sessions[session]["skips"] = 0

		#Embed
		if value == 21:
			self.blackjack_cooldown[str(member1.id)]['win'] += bet
			self.blackjack_cooldown[str(member1.id)]['lastwin'] = curTime()
			return await self.end_game(inter, session, 2)
		else:
			emb = self.blackjack_embed(session)

		#–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è
		components = [
			disnake.ui.Button(label="–í–∑—è—Ç–∏ –∫–∞—Ä—Ç–∫—É", style=disnake.ButtonStyle.blurple, custom_id=f"bj_hit:{session}"),
			disnake.ui.Button(label="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ö—ñ–¥", style=disnake.ButtonStyle.green, custom_id=f"bj_skip:{session}"),
			disnake.ui.Button(label="–Ø–∫ –≥—Ä–∞—Ç–∏?", emoji="‚ùî", custom_id="bj_help")
		]
		if not inter.response.is_done():
			await inter.response.defer()
		await inter.edit_original_response("", embed=emb, components=components)
		
		#–í–∏–¥–∞–ª–µ–Ω–Ω—è
		await asyncio.sleep(180)
		if session in self.blackjack_sessions:
			try: return await self.end_game(inter, session, 3)
			except: pass
			try: self.blackjack_sessions.pop(session)
			except: pass


	@commands.slash_command(name="blackjack", description="üí∞ –ì—Ä–∞—Ç–∏ –≤ –≥—Ä—É blackjack.", guild_ids=[GUILD_ID])
	@commands.cooldown(1, 2, commands.BucketType.user)
	async def blackjack(self, inter:disnake.CommandInter, —Å—Ç–∞–≤–∫–∞:str=commands.Param(description="–°—Ç–∞–≤–∫–∞. (all - –≤—Å—ñ –≤–∞—à—ñ –≥—Ä–æ—à—ñ.)"), —É—á–∞—Å–Ω–∏–∫:disnake.Member=commands.Param(default=None, description="–Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏, –≤–∏ –±—É–¥–µ—Ç–µ –≥—Ä–∞—Ç–∏ –ø—Ä–æ—Ç–∏ –±–æ—Ç–∞.")):
		member = —É—á–∞—Å–Ω–∏–∫
		bet = —Å—Ç–∞–≤–∫–∞
		all_arg = ('all', '–≤—Å—ñ', '–≤—Å–µ', 'oll', '—É—Å—ñ', '—É—Å–µ')
		register(inter.author)
		money = eco_db.find(f"{inter.author.id}.money")
		if member:
			money2 = eco_db.find(f"{member.id}.money")
		if bet.lower() in all_arg:
			bet = money

		#–ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
		try: bet = int(bet)
		except:
			return await error(inter, f"<:cross:1127281507430576219> **–í–∫–∞–∂—ñ—Ç—å —Å—Ç–∞–≤–∫—É, —è–∫ —Ü—ñ–ª–µ —á–∏—Å–ª–æ, –∞–±–æ \"all\" –¥–ª—è –≤—Å—ñ—Ö –≥—Ä–æ—à–µ–π.**")
		if bet > BJ_LIMIT[1]:
			bet = BJ_LIMIT[1]
		if bet > money:
			return await error(inter, f"<:cross:1127281507430576219> **–í–∏ –≤–∫–∞–∑–∞–ª–∏ –±—ñ–ª—å—à–µ, –Ω—ñ–∂ —É –≤–∞—Å —î –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ! ({hf(money)}/{hf(bet)}{CURRENCY})**")
		if member and bet > money2:
			return await error(inter, f"<:cross:1127281507430576219> **–£ {member.mention} –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –≥—Ä–æ—à–µ–π! ({hf(money2)}/{hf(bet)}{CURRENCY})**")
		if bet < BJ_LIMIT[0]:
			return await error(inter, f"<:cross:1127281507430576219> **–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–æ—é –∑–∞ {BJ_LIMIT[0]}{CURRENCY}**")

		#–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É —Å–µ—Å—ñ—é
		for game in self.blackjack_sessions:
			if self.blackjack_sessions[game]["member"]["id"] == inter.author.id or self.blackjack_sessions[game]["dealer"]["id"] == inter.author.id:
				return await error(inter, f"<:cross:1127281507430576219> **–í–∏ –≤–∂–µ –ø—Ä–∏–π–º–∞—î—Ç–µ —É—á–∞—Å—Ç—å –≤ —ñ–Ω—à—ñ–π –≥—Ä—ñ!**")
			if member and (self.blackjack_sessions[game]["member"]["id"] == member.id or self.blackjack_sessions[game]["dealer"]["id"] == member.id):
				return await error(inter, f"<:cross:1127281507430576219> **{member.mention} –≤–∂–µ –ø—Ä–∏–π–º–∞—î —É—á–∞—Å—Ç—å –≤ —ñ–Ω—à—ñ–π –≥—Ä—ñ!**")

		#–ó–∞—Ç—Ä–∏–º–∫–∞
		self.check_bj(inter.author)
		check = await checkcooldown(inter.author, "blackjack")
		if check: return await cooldown_notice(inter, check)

		#–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è
		if not member:
			await self.start_blackjack(inter, inter.author, None, bet)
		else:
			emb = disnake.Embed(title="üÉè –ë–ª–µ–∫–¥–∂–µ–∫", description=f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {inter.author.mention} –Ω–∞–¥—ñ—Å–ª–∞–≤ –≤–∞–º –∑–∞–ø–∏—Ç –Ω–∞ –≥—Ä—É –≤ –±–ª–µ–∫–¥–∂–µ–∫.\n**–°—Ç–∞–≤–∫–∞:** {hf(bet)}{CURRENCY}", color=GREEN, timestamp=inter.created_at)
			emb.set_thumbnail(inter.author.display_avatar)
			await inter.response.send_message(f"<:check:1127281505153069136> **–£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∑–∞–ø–∏—Ç!**", ephemeral=True)
			acceptbtn = disnake.ui.Button(label="–ü—Ä–∏–π–Ω—è—Ç–∏", style=disnake.ButtonStyle.green, custom_id=f"bj_accept:{member.id}:{inter.author.id}:{bet}")
			denybtn = disnake.ui.Button(label="–í—ñ–¥—Ö–∏–ª–∏—Ç–∏", style=disnake.ButtonStyle.red, custom_id=f"bj_deny:{member.id}")
			msg = await inter.channel.send(member.mention, embed=emb, components=[acceptbtn, denybtn])

			#–í–∏–¥–∞–ª–µ–Ω–Ω—è
			await asyncio.sleep(60)
			try:
				msg = await msg.channel.fetch_message(msg.id)
				if msg.components[0].children[0].custom_id.startswith("bj_accept"):
					await msg.delete()
			except: pass


def setup(bot:commands.Bot):
	bot.add_cog(Blackjack(bot))