from utils import *


class Voice(commands.Cog):
	def __init__(self, bot:commands.Bot):
		self.bot = bot
		self.cooldown = {}

	#Embed
	@commands.command()
	async def voicepanel(self, ctx:commands.Context):
		if ctx.author.id != ALEX: return
		emb = disnake.Embed(title="üîß –ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–∏–º–∏ –∫—ñ–º–Ω–∞—Ç–∞–º–∏", description=(
			"–í–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—î—é –∫—ñ–º–Ω–∞—Ç–æ—é –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ.\n\n"
			"üëë ‚Äî –ü–µ—Ä–µ–¥–∞—Ç–∏ –ø—Ä–∞–≤–∞ —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.\n"
			"üìù ‚Äî –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ –ø—Ä–∏–≤–∞—Ç–∫—É.\n"
			"‚õî ‚Äî –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ª—ñ–º—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.\n"
			"üîí ‚Äî –ó–∞–∫—Ä–∏—Ç–∏/–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø—Ä–∏–≤–∞—Ç–∫—É.\n"
			"üë• ‚Äî –î–æ–∑–≤–æ–ª–∏—Ç–∏/–ó–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑–∞—Ö–æ–¥–∏—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–∫—É.\n"
			"üíæ ‚Äî –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–∫–∏.\n"
			"üì• ‚Äî –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–∫–∏."
		), color=INVISIBLE)
		await ctx.send(embed=emb, components=[
			disnake.ui.Button(emoji="üëë", custom_id="voice_transfer"),
			disnake.ui.Button(emoji="üìù", custom_id="voice_rename"),
			disnake.ui.Button(emoji="‚õî", custom_id="voice_limit"),
			disnake.ui.Button(emoji="üîí", custom_id="voice_lock"),
			disnake.ui.Button(emoji="üë•", custom_id="voice_member"),
			disnake.ui.Button(emoji="<:empty:1229687771019481129>", custom_id="voice_none", disabled=True),
			disnake.ui.Button(emoji="üíæ", custom_id="voice_save"),
			disnake.ui.Button(emoji="<:empty:1229687771019481129>", custom_id="voice_none2", disabled=True),
			disnake.ui.Button(emoji="üì•", custom_id="voice_load"),
			disnake.ui.Button(emoji="<:empty:1229687771019481129>", custom_id="voice_none3", disabled=True)
		])
		await ctx.message.delete()


	#–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞
	def check(self, member: disnake.Member) -> str | disnake.VoiceChannel:
		if not member.voice:
			return "<:cross:1127281507430576219> **–í–∏ –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —É –≤–æ–π—Å—ñ!**"
		channel = member.voice.channel
		if channel.category_id != VOICE_CATEGORY_ID or channel.id == VOICE_CREATE_ID:
			return "<:cross:1127281507430576219> **–í–∏ –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —É –≤–æ–π—Å—ñ!**"
		if channel.overwrites_for(member).move_members != True:
			return "<:cross:1127281507430576219> **–í–∏ –Ω–µ —î —Ç–≤–æ—Ä—Ü–µ–º –≤–æ–π—Å—É!**"
		return channel


	###
	### –ú–æ–¥–∞–ª
	###
	@commands.Cog.listener()
	async def on_modal_submit(self, inter: disnake.ModalInteraction):
		if not inter.custom_id.startswith("voice_"): return
		#–ù–∞–∑–≤–∞
		if inter.custom_id == "voice_name":
			#–ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
			if str(inter.author.id) not in self.cooldown:
				self.cooldown[str(inter.author.id)] = {}
			if 'name' not in self.cooldown[str(inter.author.id)]:
				self.cooldown[str(inter.author.id)]['name'] = [0,0]
			#–ó–∞—Ç—Ä–∏–º–∫–∞
			self.cooldown[str(inter.author.id)]['name'][1] += 1
			if self.cooldown[str(inter.author.id)]['name'][1] == 2:
				self.cooldown[str(inter.author.id)]['name'][1] = 0
				self.cooldown[str(inter.author.id)]['name'][0] = time()+600
			channel = self.check(inter.author)
			if not isinstance(channel, disnake.VoiceChannel):
				return await error(inter, channel)
			#–í—ñ–¥–ø–æ–≤—ñ–¥—å
			text = inter.text_values['name']
			await inter.send(f"<:check:1127281505153069136> **–£—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞–∑–≤—É –ø—Ä–∏–≤–∞—Ç–∫–∏ –Ω–∞ `{text}`!**", ephemeral=True)
			await channel.edit(name=text)

		#–õ—ñ–º—ñ—Ç
		elif inter.custom_id == "voice_limit":
			#–ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
			if str(inter.author.id) not in self.cooldown:
				self.cooldown[str(inter.author.id)] = {}
			if 'limit' not in self.cooldown[str(inter.author.id)]:
				self.cooldown[str(inter.author.id)]['limit'] = 0
			self.cooldown[str(inter.author.id)]['limit'] = time()+15
			channel = self.check(inter.author)
			if not isinstance(channel, disnake.VoiceChannel):
				return await error(inter, channel)
			#–í—ñ–¥–ø–æ–≤—ñ–¥—å
			try: limit = int(inter.text_values['limit'])
			except: limit = 0
			await inter.send(f"<:check:1127281505153069136> **–£—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –ª—ñ–º—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—Ä–∏–≤–∞—Ç–∫–∏ –Ω–∞ `{limit}`!**", ephemeral=True)
			await channel.edit(user_limit=limit)


	###
	### –ö–Ω–æ–ø–∫–∞
	###
	@commands.Cog.listener()
	async def on_button_click(self, inter: disnake.MessageInteraction):
		if not inter.component.custom_id.startswith("voice_"): return
		member = inter.author
		channel = self.check(inter.author)
		if not isinstance(channel, disnake.VoiceChannel):
			return await error(inter, channel)

		#–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏
		if inter.component.custom_id == "voice_rename":
			#–ó–∞—Ç—Ä–∏–º–∫–∞
			if str(inter.author.id) not in self.cooldown:
				self.cooldown[str(inter.author.id)] = {}
			if 'name' not in self.cooldown[str(inter.author.id)]:
				self.cooldown[str(inter.author.id)]['name'] = [0,0]
			if self.cooldown[str(inter.author.id)]['name'][0] > time():
				return await cooldown_notice(inter, self.cooldown[str(inter.author.id)]['name'][0])
			#–ú–æ–¥–∞–ª
			components = disnake.ui.TextInput(label="–ù–∞–∑–≤–∞", placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É —Ç—É—Ç", custom_id="name", min_length=2, max_length=20)
			modal = disnake.ui.Modal(title="–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É –ø—Ä–∏–≤–∞—Ç–∫–∏", custom_id="voice_name", components=components)
			await inter.response.send_modal(modal)

		#–õ—ñ–º—ñ—Ç
		elif inter.component.custom_id == "voice_limit":
			#–ó–∞—Ç—Ä–∏–º–∫–∞
			if str(inter.author.id) not in self.cooldown:
				self.cooldown[str(inter.author.id)] = {}
			if 'limit' not in self.cooldown[str(inter.author.id)]:
				self.cooldown[str(inter.author.id)]['limit'] = 0
			if self.cooldown[str(inter.author.id)]['limit'] > time():
				return await cooldown_notice(inter, self.cooldown[str(inter.author.id)]['limit'])
			#–ú–æ–¥–∞–ª
			components = disnake.ui.TextInput(label="–õ—ñ–º—ñ—Ç", placeholder="–í–≤–µ–¥—ñ—Ç—å –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", custom_id="limit", min_length=1, max_length=2)
			modal = disnake.ui.Modal(title="–ó–º—ñ–Ω–∏—Ç–∏ –ª—ñ–º—ñ—Ç –ø—Ä–∏–≤–∞—Ç–∫–∏", custom_id="voice_limit", components=components)
			await inter.response.send_modal(modal)

		#–ó–∞–∫—Ä–∏—Ç–∏/–í—ñ–¥–∫—Ä–∏—Ç–∏
		elif inter.component.custom_id == "voice_lock":
			#–ó–∞—Ç—Ä–∏–º–∫–∞
			if str(inter.author.id) not in self.cooldown:
				self.cooldown[str(inter.author.id)] = {}
			if 'status' not in self.cooldown[str(inter.author.id)]:
				self.cooldown[str(inter.author.id)]['status'] = 0
			if self.cooldown[str(inter.author.id)]['status'] > time():
				return await cooldown_notice(inter, self.cooldown[str(inter.author.id)]['status'])
			overwrites = channel.overwrites
			#–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –≤–æ–π—Å—É
			if not channel.overwrites[member.guild.default_role].connect:
				overwrites[member.guild.default_role] = get_voice_perms()
				await success(inter, "<:check:1127281505153069136> **–£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ –ø—Ä–∏–≤–∞—Ç–∫—É!**", ephemeral=True)
			#–ó–∞–∫—Ä–∏—Ç—Ç—è –≤–æ–π—Å—É
			else:
				voice_close = get_voice_perms()
				voice_close.send_messages = False
				voice_close.connect = False
				overwrites[member.guild.default_role] = voice_close
				await success(inter, "<:check:1127281505153069136> **–£—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ –ø—Ä–∏–≤–∞—Ç–∫—É!**", ephemeral=True)
			await channel.edit(overwrites=overwrites)
			self.cooldown[str(inter.author.id)]['status'] = curTime()+15

		#–ü–µ—Ä–µ–¥–∞—Ç–∏ –æ–≤–Ω–µ—Ä–∫—É
		elif inter.component.custom_id == "voice_transfer":
			self.cooldown[str(inter.author.id)]['members'] = time()+5
			dropdown = disnake.ui.UserSelect(custom_id="voice_transfer")
			await inter.send("**üëë –ü–µ—Ä–µ–¥–∞—Ç–∏ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–ª–∞—Å–Ω—ñ—Å—Ç—å –ø—Ä–∏–≤–∞—Ç–∫–æ—é.**", components=[dropdown], ephemeral=True)

		#–î–æ–∑–≤–æ–ª–∏—Ç–∏/–∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑–∞—Ö–æ–¥–∏—Ç–∏
		elif inter.component.custom_id == "voice_member":
			dropdown = disnake.ui.UserSelect(custom_id="voice_member")
			if not channel.overwrites_for(inter.guild.default_role).connect:
				await inter.send("**üü¢ –î–æ–∑–≤–æ–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑–∞—Ö–æ–¥–∏—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–∫—É.**", components=[dropdown], ephemeral=True)
			elif channel.overwrites_for(inter.guild.default_role).connect:
				await inter.send("**‚õî –ó–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑–∞—Ö–æ–¥–∏—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–∫—É.**", components=[dropdown], ephemeral=True)

		#–ó–±–µ—Ä–µ–≥—Ç–∏
		elif inter.component.custom_id == "voice_save":
			#–ó–∞—Ç—Ä–∏–º–∫–∞
			if str(inter.author.id) not in self.cooldown:
				self.cooldown[str(inter.author.id)] = {}
			if 'saveload' not in self.cooldown[str(inter.author.id)]:
				self.cooldown[str(inter.author.id)]['saveload'] = 0
			if self.cooldown[str(inter.author.id)]['saveload'] > time():
				return await cooldown_notice(inter, self.cooldown[str(inter.author.id)]['saveload'])
			self.cooldown[str(inter.author.id)]['saveload'] = time()+10
			overwrites = channel.overwrites

			#–£—á–∞—Å–Ω–∏–∫–∏
			amembers, dmembers = [], []
			for m in overwrites:
				if m != member.guild.default_role and m.id not in (KATCAP, member.id):
					if overwrites[m].connect:
						amembers.append(m.id)
					elif not overwrites[m].connect:
						dmembers.append(m.id)
			#–ó–∞–∫—Ä–∏—Ç—Ç—è
			locked = bool(not overwrites[member.guild.default_role].connect)

			#–ë–î
			update = {}
			update["name"] = channel.name
			update["limit"] = channel.user_limit
			update["allow_members"] = amembers
			update["deny_members"] = dmembers
			update["locked"] = locked
			voice_db.update(f"{member.id}", update)

			#–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫—ñ–≤
			amembers_str, dmembers_str = "",""
			if amembers == []: amembers_str = "`–ù–µ–º–∞—î`"
			if dmembers == []: dmembers_str = "`–ù–µ–º–∞—î`"
			for m in amembers:
				amembers_str += f"{member.guild.get_member(m).mention} "
			for m in dmembers:
				dmembers_str += f"{member.guild.get_member(m).mention} "

			await inter.response.send_message((
				"<:check:1127281505153069136> **–£—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–∫–∏!**\n"
				f"> **–ù–∞–∑–≤–∞:** `{channel.name}`\n"
				f"> **–õ—ñ–º—ñ—Ç:** `{channel.user_limit}`\n"
				f"> **–ó–∞–∫—Ä–∏—Ç–∏–π:** {BOOLSTATUS[locked]}\n"
				f"> **–î–æ–∑–≤–æ–ª–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:** {amembers_str}\n"
				f"> **–ó–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:** {dmembers_str}\n"
			), ephemeral=True)

		#–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
		elif inter.component.custom_id == "voice_load":
			#–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤ –ë–î
			if str(inter.author.id) not in self.cooldown:
				self.cooldown[str(inter.author.id)] = {}
			if 'saveload' not in self.cooldown[str(inter.author.id)]:
				self.cooldown[str(inter.author.id)]['saveload'] = 0
			if 'name' not in self.cooldown[str(inter.author.id)]:
				self.cooldown[str(inter.author.id)]['name'] = [0,0]
			if self.cooldown[str(inter.author.id)]['saveload'] > time():
				return await cooldown_notice(inter, self.cooldown[str(inter.author.id)]['saveload'])
			#–ó–∞—Ç—Ä–∏–º–∫–∞
			self.cooldown[str(inter.author.id)]['name'][1] += 1
			self.cooldown[str(inter.author.id)]['saveload'] = time()+10
			if self.cooldown[str(inter.author.id)]['name'][1] == 2:
				self.cooldown[str(inter.author.id)]['name'][1] = 0
				self.cooldown[str(inter.author.id)]['name'][0] = time()+600
			#–ë–î
			overwrites = channel.overwrites
			voice = voice_db.full()
			if str(member.id) not in voice: return await error(inter, "<:cross:1127281507430576219> **–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–∏–≤–∞—Ç–∫–∏!**")
			voice = voice[str(member.id)]

			#–ó–∞–∫—Ä–∏—Ç—Ç—è
			if voice["locked"]:
				voice_close = get_voice_perms()
				voice_close.send_messages = False
				voice_close.connect = False
				overwrites[member.guild.default_role] = voice_close
			overwrites[member] = voice_owner

			#–î–æ–∑–≤–æ–ª–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
			allow_members = ""
			if voice['allow_members'] != []:
				for m in voice["allow_members"]:
					mem = member.guild.get_member(m)
					if mem == None: continue
					overwrites[mem] = voice_member_allow
					allow_members += f"{mem.mention} "
			else:
				allow_members = "`–ù–µ–º–∞—î`"
			#–ó–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
			deny_members = ""
			if voice['deny_members'] != []:
				for m in voice["deny_members"]:
					mem = member.guild.get_member(m)
					if mem == None: continue
					overwrites[mem] = voice_member_block
					deny_members += f"{mem.mention} "
			else:
				deny_members = "`–ù–µ–º–∞—î`"

			await inter.send((
				"<:check:1127281505153069136> **–£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–∫–∏!**\n"
				f"> **–ù–∞–∑–≤–∞:** `{voice['name']}`\n"
				f"> **–õ—ñ–º—ñ—Ç:** `{voice['limit']}`\n"
				f"> **–ó–∞–∫—Ä–∏—Ç–∏–π:** {BOOLSTATUS[voice['locked']]}\n"
				f"> **–î–æ–∑–≤–æ–ª–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:** {allow_members}\n"
				f"> **–ó–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:** {deny_members}\n"
			), ephemeral=True)
			#–ó–∞—Ç—Ä–∏–º–∫–∞
			if self.cooldown[str(inter.author.id)]['name'][0] < time():
				await channel.edit(name=voice["name"], user_limit=voice["limit"], overwrites=overwrites)


	###
	### –°–µ–ª–µ–∫—Ç –º–µ–Ω—é
	###
	@commands.Cog.listener()
	async def on_dropdown(self, inter: disnake.MessageInteraction):
		if not inter.component.custom_id.startswith("voice_"): return
		member = inter.author
		channel = self.check(inter.author)
		if not isinstance(channel, disnake.VoiceChannel):
			return await error(inter, channel)
		###
		### –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
		###
		if inter.component.custom_id == "voice_member":
			#–ó–∞—Ç—Ä–∏–º–∫–∞
			if str(inter.author.id) not in self.cooldown:
				self.cooldown[str(inter.author.id)] = {}
			if 'members' not in self.cooldown[str(inter.author.id)]:
				self.cooldown[str(inter.author.id)]['members'] = 0
			if self.cooldown[str(inter.author.id)]['members'] > time():
				return await cooldown_notice(inter, self.cooldown[str(inter.author.id)]['members'])
			self.cooldown[str(inter.author.id)]['members'] = time()+5
			overwrites = channel.overwrites

			#–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
			newmember = member.guild.get_member(int(inter.values[0]))
			if newmember not in member.guild.members:
				return await error(inter, "<:cross:1127281507430576219> **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!**", ephemeral=True)

			#–î–æ–∑–≤–æ–ª–∏—Ç–∏ –¥–æ—Å—Ç—É–ø
			if not channel.overwrites_for(inter.guild.default_role).connect:
				if newmember in overwrites:
					overwrites.pop(newmember)
					await success(inter, f"<:check:1127281505153069136> **–£—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–±—Ä–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {newmember.mention} –∑ –ø—Ä–∏–≤–∞—Ç–∫–∏!**",ephemeral=True)
				else:
					overwrites[newmember] = voice_member_allow
					await success(inter, f"<:check:1127281505153069136> **–£—Å–ø—ñ—à–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –∑–∞—Ö–æ–¥–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {newmember.mention} –¥–æ –ø—Ä–∏–≤–∞—Ç–∫–∏!**",ephemeral=True)
			#–ó–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ –¥–æ—Å—Ç—É–ø
			elif channel.overwrites_for(inter.guild.default_role).connect:
				if newmember in overwrites:
					overwrites.pop(newmember)
					await success(inter, f"<:check:1127281505153069136> **–£—Å–ø—ñ—à–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {newmember.mention} –∑–∞—Ö–æ–¥–∏ –¥–æ –ø—Ä–∏–≤–∞—Ç–∫–∏!**",ephemeral=True)
				else:
					overwrites[newmember] = voice_member_block
					await success(inter, f"<:check:1127281505153069136> **–£—Å–ø—ñ—à–Ω–æ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {newmember.mention} –∑–∞—Ö–æ–¥–∏—Ç–∏ –¥–æ –ø—Ä–∏–≤–∞—Ç–∫–∏!**",ephemeral=True)
			await channel.edit(overwrites=overwrites)
		
		###
		### –ü–µ—Ä–µ–¥–∞—á–∞ –æ–≤–Ω–µ—Ä–∫–∏
		###
		elif inter.component.custom_id == "voice_transfer":
			#–ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
			if str(inter.author.id) not in self.cooldown:
				self.cooldown[str(inter.author.id)] = {}
			if 'members' not in self.cooldown[str(inter.author.id)]:
				self.cooldown[str(inter.author.id)]['members'] = 0
			if self.cooldown[str(inter.author.id)]['members'] > time():
				return await cooldown_notice(inter, self.cooldown[str(inter.author.id)]['members'])
			channel = self.check(inter.author)
			if not isinstance(channel, disnake.VoiceChannel):
				return await error(inter, channel)

			#–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–∞–Ω–∞–ª—É
			newowner = inter.guild.get_member(int(inter.values[0]))
			if not newowner:
				return await error(inter, "<:cross:1127281507430576219> **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!**")

			#–ü—Ä–∞–≤–∞ –∫–∞–Ω–∞–ª—É
			overwrites = channel.overwrites
			overwrites.pop(inter.author)
			overwrites[newowner] = voice_owner
			#–í—ñ–¥–ø–æ–≤—ñ–¥—å
			self.cooldown[str(inter.author.id)]['members'] = time()+5
			await success(inter, f"<:check:1127281505153069136> **–£—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {newowner.mention}!**", ephemeral=True)
			await channel.edit(overwrites=overwrites)


	@commands.Cog.listener()
	async def on_voice_state_update(self, member:disnake.Member, before:disnake.VoiceState, after:disnake.VoiceState):
		if member.guild.id != GUILD_ID: return
		guild = member.guild
		#–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–∫–∏
		if before.channel:
			if len(before.channel.members) < 1 and before.channel.id != VOICE_CREATE_ID:
				if before.channel.category_id == VOICE_CATEGORY_ID:
					try: await before.channel.delete()
					except: pass
		#–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–∫–∏
		if not after.channel: return
		if after.channel.id == VOICE_CREATE_ID:
			#–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É
			overwrites = {
				guild.default_role: get_voice_perms(),
				member: voice_owner,
				guild.get_role(STAFF_ID): disnake.PermissionOverwrite(deafen_members=True, mute_members=True),
				guild.get_role(KATCAP): disnake.PermissionOverwrite(read_messages=False)
			}
			category = self.bot.get_channel(VOICE_CATEGORY_ID)
			channel = await guild.create_voice_channel(member.display_name, overwrites=overwrites, category=category)
			try: await member.move_to(channel)
			except: return await channel.delete()

			#–ó–∞—Ç—Ä–∏–º–∫–∞
			self.cooldown[str(member.id)] = {}
			self.cooldown[str(member.id)]['name'] = [0,0]
			self.cooldown[str(member.id)]['limit'] = 0
			self.cooldown[str(member.id)]['status'] = 0
			self.cooldown[str(member.id)]['members'] = 0
			self.cooldown[str(member.id)]['saveload'] = 0


def setup(bot:commands.Bot):
	bot.add_cog(Voice(bot))