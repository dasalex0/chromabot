from cogs.level import Level
from utils import *


class Other(commands.Cog):
	def __init__(self, bot:commands.Bot):
		self.bot = bot


	###
	### –†–æ–∑—ñ–≥—Ä–∞—à—ñ (—Ç–∞—Å–∫)
	###
	@tasks.loop(seconds=15)
	async def giveaways(self):
		giveaways = giveaways_db.full()
		if list(giveaways) != []:
			guild = self.bot.get_guild(GUILD_ID)
			for msg in list(giveaways):
				#–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
				giv = giveaways[msg]
				if not giv['time'] <= curTime() or giv['ended'] == True: continue
				channel = self.bot.get_channel(int(giv['channel']))
				prize = giv['prize']
				message = await channel.fetch_message(int(msg))

				#–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
				users = await message.reactions[0].users().flatten()
				users.pop(users.index(self.bot.user))

				#–ü–µ—Ä–µ–º–æ–∂—Ü—ñ
				winners = ""
				if giv['winners'] > 1:
					for _ in range(giv['winners']):
						winner = random.choice(users)
						users.pop(users.index(winner))
						winners += f"{winner.mention} "
				else:
					winner = random.choice(users)
					winners += f"{winner.mention}"
				if giv['winners'] <= 1:
					await channel.send(f"üéâ –í—ñ—Ç–∞—î–º–æ, {winners}, –≤–∏ –≤–∏–≥—Ä–∞–ª–∏ –ø—Ä–∏–∑: **{prize}**!")
					t = "–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å"
				else:
					await channel.send(f"üéâ –í—ñ—Ç–∞—î–º–æ, {winners} –≤–∏ –≤–∏–≥—Ä–∞–ª–∏ –ø—Ä–∏–∑: **{prize}**!")
					t = "–ü–µ—Ä–µ–º–æ–∂—Ü—ñ"

				#Embed
				emb = disnake.Embed(description=message.embeds[0].description, color=EMBEDCOLOR)
				emb.add_field(name=t, value=winners)
				emb.set_thumbnail(url=guild.icon)
				emb.set_footer(text="–†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–∫—ñ–Ω—á–µ–Ω–æ!")
				await message.edit("**–†–û–ó–Ü–ì–†–ê–® –ó–ê–ö–Ü–ù–ß–ï–ù–û! üéâ**", embed=emb)
				#–ë–î
				giv["ended"] = True
				giveaways_db.update(msg, giv)

	@commands.Cog.listener()
	async def on_ready(self):
		if not self.giveaways.is_running():
			self.giveaways.start()


	###
	### –†–æ–∑—ñ–≥—Ä–∞—à—ñ
	###
	@commands.slash_command(name="giveaway", description="üëë –ü–æ—á–∞—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à.", guild_ids=[GUILD_ID])
	@commands.cooldown(1, 2, commands.BucketType.user)
	async def giveaway(self, inter:disnake.CommandInter, channel:disnake.TextChannel|disnake.NewsChannel=commands.Param(description="–í —è–∫–æ–º—É –∫–∞–Ω–∞–ª—ñ –±—É–¥–µ —Ä–æ–∑—ñ–≥—Ä–∞—à?"), duration:str=commands.Param(description="–°–∫—ñ–ª—å–∫–∏ –±—É–¥–µ –π—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à? (s|m|h|d)"), winners:int=commands.Param(description="–°–∫—ñ–ª—å–∫–∏ –ª—é–¥–µ–π –∑–º–æ–∂—É—Ç—å –≤–∏–≥—Ä–∞—Ç–∏ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ?"), prize:str=commands.Param(description="–Ø–∫–∏–π –ø—Ä–∏–∑ –±—É–¥–µ —Ä–æ–∑—ñ–≥—Ä—É–≤–∞—Ç–∏—Å—å?")):
		if inter.author.id != ALEX: return
		gtime = convert_time(duration)
		if gtime == -1: return await inter.send(f"‚ùå **–í–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –æ–¥–∏–Ω–∏—Ü–µ—é! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ (s|m|h|d) –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É.**", ephemeral=True)
		elif gtime == -2: return await inter.send(f"‚ùå **–ß–∞—Å –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º! –ù–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ.**", ephemeral=True)

		await inter.send(f"–†–æ–∑—ñ–≥—Ä–∞—à –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ {channel.mention} —ñ –∑–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è <t:{curTime()+gtime}:R> (<t:{curTime()+gtime}:R>)", ephemeral=True)

		emb = disnake.Embed(description=f"**{prize}**", color=EMBEDCOLOR)
		emb.add_field(name="–ó–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è", value=f"<t:{curTime()+gtime}:R>")
		emb.add_field(name="–ü–µ—Ä–µ–º–æ–∂—Ü—ñ–≤", value=f"` {winners} `")
		emb.set_thumbnail(url=inter.guild.icon)
		emb.set_footer(text=f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–∫—Ü—ñ—é üéâ, —â–æ–± –ø—Ä–∏–π–Ω—è—Ç–∏ —É—á–∞—Å—Ç—å.")
		msg = await channel.send("**–†–û–ó–Ü–ì–†–ê–® üéâ**",embed=emb)
		await msg.add_reaction("üéâ")

		update = {}
		update["ended"] = False
		update["channel"] = int(channel.id)
		update["time"] = curTime()+gtime
		update["winners"] = int(winners)
		update["prize"] = str(prize)
		giveaways_db.update(str(msg.id), update)

	@commands.message_command(name="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à", guild_ids=[GUILD_ID])
	async def reroll(self, inter:disnake.MessageCommandInteraction):
		if inter.author.id != ALEX: return
		message = inter.target
		giveaways = giveaways_db.full()
		if str(message.id) not in giveaways:
			return await error(inter, "<:cross:1127281507430576219> **–í–∫–∞–∑–∞–Ω–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ —ñ—Å–Ω—É—î!**")

		#–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
		users = await message.reactions[0].users().flatten()
		users.pop(users.index(self.bot.user))

		#–ü–µ—Ä–µ–º–æ–∂—Ü—ñ
		winners = ""
		winnersc = giveaways[str(message.id)]["winners"]
		if winnersc > 1:
			t = "–ü–µ—Ä–µ–º–æ–∂—Ü—ñ"
			for _ in range(winnersc):
				winner = random.choice(users)
				users.pop(users.index(winner))
				winners += f"{winner.mention} "
		else:
			t = "–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å"
			winner = random.choice(users)
			winners += f"{winner.mention}"

		#–í—ñ–¥–ø–æ–≤—ñ–¥—å
		await inter.send(f"‚úÖ –†–æ–∑—ñ–≥—Ä–∞—à –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ!", ephemeral=True)
		await message.channel.send(f"üîÑ –†–æ–∑—ñ–≥—Ä–∞—à –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ. –ù–æ–≤–∏–π –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å: {winners}")
		#Embed
		emb = disnake.Embed(description=message.embeds[0].description, color=EMBEDCOLOR)
		emb.add_field(name=t, value=f"{winners}")
		emb.set_thumbnail(url=inter.guild.icon)
		emb.set_footer(text="–†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–∫—ñ–Ω—á–µ–Ω–æ!")
		await message.edit("**–†–û–ó–Ü–ì–†–ê–® (—Ä–µ—Ä–æ–ª) üéâ**", embed=emb)
		giveaways_db.update(f'{id}.ended', True)



	###
	### –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤
	###
	@commands.Cog.listener("on_button_click")
	async def on_top_button(self, inter:disnake.MessageInteraction):
		if inter.component.custom_id.startswith("top:"):
			custom_id = inter.component.custom_id.split(':')
			type = custom_id[1]
			author_id = inter.message.interaction.author.id
			if inter.author.id != author_id:
				return await error(inter, "<:cross:1127281507430576219> **–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!**")
			page = int(inter.message.embeds[0].footer.text.replace("–°—Ç–æ—Ä—ñ–Ω–∫–∞: ","").split("/")[0])
			if custom_id[2] == "prev": page -= 1
			elif custom_id[2] == "next": page += 1
			await self.top_func(inter, type, page, edit=True)

	@commands.slash_command(name="top", description="üìã –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤.", guild_ids=[GUILD_ID])
	@commands.cooldown(1, 2, commands.BucketType.user)
	async def top(self, inter:disnake.CommandInter, —Ç–∏–ø:str=commands.Param(description="–¢–∏–ø —Ç–∞–±–ª–∏—Ü—ñ", choices=[
		OptionChoice("üöÄ –†—ñ–≤–µ–Ω—å", "level"),
		OptionChoice("üé§ –í–æ–π—Å", "voice"),
		OptionChoice("üí∏ –ì—Ä–æ—à—ñ", "money"),
		OptionChoice("üêñ –°–≤–∏–Ω—ñ", "pig"),
		OptionChoice("üì® –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è", "invites")
	])):
		if inter.locale == disnake.Locale.ru:
			return await error(inter, "<:cross:1127281507430576219> **–ü—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–≤–∏ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞!**")
		await self.top_func(inter, —Ç–∏–ø, 1)

	async def top_func(self, inter:disnake.CommandInter, type:str, page:int, edit:bool=False):
		#–ë–î
		register(inter.author)
		level = level_db.full()
		eco = eco_db.full()
		pig = pigs_db.full()
		invdb = invites_db.full()
		#Embed
		emb = disnake.Embed(title="–¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤", color=EMBEDCOLOR)
		emb.set_thumbnail(url=inter.guild.icon)

		#–†—ñ–≤–µ–Ω—å
		toppos = 0
		if type == "level":
			sorted_top = sorted(level, key=lambda k: -(Level.get_full_level(int(k))*50000 + level[k]["xp"]))
			for k in sorted_top:
				t = level[k]['type']
				toppos += 1
				owner = inter.guild.get_member(int(k))
				if not owner or (level[k]["type"] == 'bronze' and level[k]["xp"] <= 50):
					toppos -= 1;continue
				if toppos > page*10-10 and toppos <= page*10:
					voicemsg = ""
					if level[k]["voice"] >= 15:
						voicemsg = f" | **`{voicelevel(level[k]['voice'])}` üé§**"
					emb.add_field(name=f"{set_rank(toppos)}#{toppos}. {owner.display_name}", value=f"**–†—ñ–≤–µ–Ω—å:** `{LEVELS[t]['name']} {str(level[k]['level'])}` | **XP:** `{level[k]['xp']}`{voicemsg}", inline=False)

		#–ì–æ–ª–æ—Å–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
		elif type == "voice":
			sorted_top = sorted(level, key=lambda k: -level[k]["voice"])
			for k in sorted_top:
				toppos += 1
				owner = inter.guild.get_member(int(k))
				if not owner or level[k]["voice"] < 60:
					toppos -= 1;continue
				if toppos > page*10-10 and toppos <= page*10:
					voiceactive = voicelevel(level[k]['voice'])
					emb.add_field(name=f"{set_rank(toppos)}#{toppos}. {owner.display_name}", value=f"**`{voiceactive}` üé§**", inline=False)

		#–ì—Ä–æ—à—ñ
		elif type == "money":
			sorted_top = {}
			for m in eco:
				money = eco[m]['money']
				if m in pig:
					money += pig[m]['balance']
				sorted_top[m] = money
			sorted_top = sorted(sorted_top, key=lambda k: -sorted_top[k])
			for k in sorted_top:
				toppos += 1
				owner = inter.guild.get_member(int(k))
				if not owner or eco[k]["money"] == 0:
					toppos -= 1;continue
				if toppos > page*10-10 and toppos <= page*10:
					money = eco[k]['money']
					pig_money = 0
					if k in pig:
						pig_money = pig[k]['balance']
					emb.add_field(name=f"{set_rank(toppos)}#{toppos}. {owner.display_name}", value=f"**–ì—Ä–æ—à—ñ: `{hf(money+pig_money)}`{CURRENCY}**", inline=False)

		#–°–≤–∏–Ω—ñ
		elif type == "pig":
			sorted_top = sorted(pig, key=lambda k: -(pig[k]["mass"]+pig[k]["power"]*3))
			for k in sorted_top:
				toppos += 1
				owner = inter.guild.get_member(int(k))
				if not owner: toppos -= 1;continue
				if toppos > page*10-10 and toppos <= page*10:
					emb.add_field(name=f"{set_rank(toppos)}#{toppos}. {pig[k]['name']}", value=f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: `{round(pig[k]['mass'], 2)} –∫–≥.` | `{pig[k]['power']}`üí™\n–í–ª–∞—Å–Ω–∏–∫: {owner.mention}**", inline=False)

		#–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è
		elif type == "invites":
			sorted_top = sorted(invdb, key=lambda k: -(len(invdb[k]['join']) - len(invdb[k]['leave'])))
			emb.description = "üìä - –†–µ–∞–ª—å–Ω—ñ —ñ–Ω–≤–∞–π—Ç–∏ (—Ç—ñ, —Ö—Ç–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ)\n‚úÖ - –ü—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è\n‚ùå - –ü–æ–∫–∏–Ω—É–ª–∏ —Å–µ—Ä–≤–µ—Ä"
			for k in sorted_top:
				toppos += 1
				total = (len(invdb[k]['join']) - len(invdb[k]['leave']))
				owner = inter.guild.get_member(int(k))
				if not owner or total <= 0:
					toppos -= 1;continue
				if toppos > page*10-10 and toppos <= page*10:
					emb.add_field(name=f"{set_rank(toppos)}#{toppos}. {owner.display_name}",value=f"**üìä `{total}` | ‚úÖ `{len(invdb[k]['join'])}` | ‚ùå `{len(invdb[k]['leave'])}`**", inline=False)

		#–°—Ç–æ—Ä—ñ–Ω–∫–∏
		final_page = int(toppos/10)
		if toppos % 10 != 0:
			final_page += 1
		emb.set_footer(text=f"–°—Ç–æ—Ä—ñ–Ω–∫–∞: {page}/{final_page}")

		#–í—ñ–¥–ø—Ä–∞–≤–∫–∞
		prev = disnake.ui.Button(emoji="<:1_:1074946080858460201>", custom_id=f"top:{type}:prev", disabled=bool(page <= 1))
		next = disnake.ui.Button(emoji="<:2_:1074946078618685520>", custom_id=f"top:{type}:next", disabled=bool(page >= final_page))
		if edit:
			return await inter.response.edit_message(embed=emb, components=[prev,next])
		await inter.send(embed=emb, components=[prev,next])


	###
	### –ê–≤–∞—Ç–∞—Ä
	###
	@commands.slash_command(name="avatar", description="üìã –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –∞–≤–∞—Ç–∞—Ä —É—á–∞—Å–Ω–∏–∫–∞.", guild_ids=[GUILD_ID])
	@commands.cooldown(1, 2, commands.BucketType.user)
	async def avatar(self, inter:disnake.CommandInter, —É—á–∞—Å–Ω–∏–∫:disnake.Member=None):
		member = —É—á–∞—Å–Ω–∏–∫
		if not member: member = inter.author
		avatar = member.display_avatar
		#–ö–Ω–æ–ø–∫–∏
		components = []
		components.append(disnake.ui.Button(label="PNG", url=f"{avatar.with_format('png').with_size(1024)}"))
		components.append(disnake.ui.Button(label="JPEG", url=f"{avatar.with_format('jpg').with_size(1024)}"))
		components.append(disnake.ui.Button(label="WEBP", url=f"{avatar.with_format('webp').with_size(1024)}"))
		if avatar._animated:
			components.append(disnake.ui.Button(label="GIF", url=f"{avatar.with_format('gif').with_size(1024)}"))
		#Embed
		emb = disnake.Embed(title=f"–ê–≤–∞—Ç–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{member}", color=EMBEDCOLOR)
		emb.set_image(url=avatar.with_size(512))
		await inter.send(embed=emb, components=components)


def setup(bot:commands.Bot):
	bot.add_cog(Other(bot))